# -*-Python-*-

# Generator and Discriminator configs with weightnorm


import __WaveGANGP


lr_g = 1e-4
lr_d = 3e-4
# you can use with discriminator having a larger learning rate than generator instead of using n_critic updates ttur https://arxiv.org/abs/1706.08500

beta1 = 0.5
beta2 = 0.9
gan_model = "WAVEGAN"
gp_weight = 10.

target_sr = 16000
target_dur = 2.
slice_len = 32768

model_size = 64
use_batch_norm = False


__WaveGANGP.WaveGANGenerator.model_size = %model_size
__WaveGANGP.WaveGANGenerator.ngpus = 1
__WaveGANGP.WaveGANGenerator.num_channels = 1
__WaveGANGP.WaveGANGenerator.verbose = False
__WaveGANGP.WaveGANGenerator.upsample = True
__WaveGANGP.WaveGANGenerator.slice_len = %slice_len
__WaveGANGP.WaveGANGenerator.use_batch_norm = %use_batch_norm
__WaveGANGP.WaveGANGenerator.noise_latent_dim = 128
__WaveGANGP.WaveGANGenerator.target_sr = %target_sr
__WaveGANGP.WaveGANGenerator.target_dur = %target_dur
__WaveGANGP.WaveGANGenerator.z_prior = "normal"


__WaveGANGP.WaveGANDiscriminator.model_size = %model_size
__WaveGANGP.WaveGANDiscriminator.ngpus = 1
__WaveGANGP.WaveGANDiscriminator.num_channels = 1
__WaveGANGP.WaveGANDiscriminator.shift_factor = 2
__WaveGANGP.WaveGANDiscriminator.alpha = 0.2
__WaveGANGP.WaveGANDiscriminator.verbose = False
__WaveGANGP.WaveGANDiscriminator.slice_len = %slice_len
__WaveGANGP.WaveGANDiscriminator.use_batch_norm = %use_batch_norm







